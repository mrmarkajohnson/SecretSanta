// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250518161358_AddPreferredNameOption")]
    partial class AddPreferredNameOption
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.Santa.Santa_GiftingGroup", b =>
                {
                    b.Property<int>("GiftingGroupKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GiftingGroupKey"));

                    b.Property<string>("CultureInfo")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("CurrencyCodeOverride")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("CurrencySymbolOverride")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime?>("DateArchived")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("FirstYear")
                        .HasColumnType("int");

                    b.Property<string>("JoinerToken")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("GiftingGroupKey");

                    b.ToTable("Santa_GiftingGroups");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_GiftingGroupApplication", b =>
                {
                    b.Property<int>("GroupApplicationKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupApplicationKey"));

                    b.Property<bool?>("Accepted")
                        .HasColumnType("bit");

                    b.Property<bool>("Blocked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateArchived")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<int>("GiftingGroupKey")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("RejectionMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResponseBySantaUserKey")
                        .HasColumnType("int");

                    b.Property<int>("SantaUserKey")
                        .HasColumnType("int");

                    b.HasKey("GroupApplicationKey");

                    b.HasIndex("GiftingGroupKey");

                    b.HasIndex("ResponseBySantaUserKey");

                    b.HasIndex("SantaUserKey");

                    b.ToTable("Santa_GiftingGroupApplications");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_GiftingGroupUser", b =>
                {
                    b.Property<int>("GiftingGroupUserKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GiftingGroupUserKey"));

                    b.Property<DateTime?>("DateArchived")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<int>("GiftingGroupKey")
                        .HasColumnType("int");

                    b.Property<bool>("GroupAdmin")
                        .HasColumnType("bit");

                    b.Property<int>("SantaUserKey")
                        .HasColumnType("int");

                    b.HasKey("GiftingGroupUserKey");

                    b.HasIndex("GiftingGroupKey");

                    b.HasIndex("SantaUserKey");

                    b.ToTable("Santa_GiftingGroupUsers");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_GiftingGroupYear", b =>
                {
                    b.Property<int>("GiftingGroupYearKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GiftingGroupYearKey"));

                    b.Property<int>("CalendarYear")
                        .HasColumnType("int");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrencySymbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateArchived")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<int>("GiftingGroupKey")
                        .HasColumnType("int");

                    b.Property<decimal?>("Limit")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("GiftingGroupYearKey");

                    b.HasIndex("GiftingGroupKey");

                    b.ToTable("Santa_GiftingGroupYears");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_GiftingGroupYear_Audit", b =>
                {
                    b.Property<int>("AuditKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditKey"));

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("GlobalUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ParentKey")
                        .HasColumnType("int");

                    b.HasKey("AuditKey");

                    b.HasIndex("GlobalUserId");

                    b.HasIndex("ParentKey");

                    b.ToTable("Santa_GiftingGroupYear_Audit");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_GiftingGroupYear_AuditChange", b =>
                {
                    b.Property<int>("AuditChangeKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditChangeKey"));

                    b.Property<int>("AuditKey")
                        .HasColumnType("int");

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditChangeKey");

                    b.HasIndex("AuditKey");

                    b.ToTable("Santa_GiftingGroupYear_AuditChanges");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_GiftingGroup_Audit", b =>
                {
                    b.Property<int>("AuditKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditKey"));

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("GlobalUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ParentKey")
                        .HasColumnType("int");

                    b.HasKey("AuditKey");

                    b.HasIndex("GlobalUserId");

                    b.HasIndex("ParentKey");

                    b.ToTable("Santa_GiftingGroup_Audit");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_GiftingGroup_AuditChange", b =>
                {
                    b.Property<int>("AuditChangeKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditChangeKey"));

                    b.Property<int>("AuditKey")
                        .HasColumnType("int");

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditChangeKey");

                    b.HasIndex("AuditKey");

                    b.ToTable("Santa_GiftingGroup_AuditChanges");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_Message", b =>
                {
                    b.Property<int>("MessageKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageKey"));

                    b.Property<DateTime?>("DateArchived")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GiftingGroupYearKey")
                        .HasColumnType("int");

                    b.Property<string>("HeaderText")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Important")
                        .HasColumnType("bit");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipientTypes")
                        .HasColumnType("int");

                    b.Property<int>("SenderKey")
                        .HasColumnType("int");

                    b.Property<bool>("ShowAsFromSanta")
                        .HasColumnType("bit");

                    b.HasKey("MessageKey");

                    b.HasIndex("GiftingGroupYearKey");

                    b.HasIndex("SenderKey");

                    b.ToTable("Santa_Messages");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_MessageRecipient", b =>
                {
                    b.Property<int>("MessageRecipientKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageRecipientKey"));

                    b.Property<DateTime?>("DateArchived")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("MessageKey")
                        .HasColumnType("int");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<int>("RecipientSantaUserKey")
                        .HasColumnType("int");

                    b.HasKey("MessageRecipientKey");

                    b.HasIndex("MessageKey");

                    b.HasIndex("RecipientSantaUserKey");

                    b.ToTable("Santa_MessageRecipients");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_MessageReply", b =>
                {
                    b.Property<int>("MessageReplyKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageReplyKey"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("OriginalMessageKey")
                        .HasColumnType("int");

                    b.Property<int>("ReplyMessageKey")
                        .HasColumnType("int");

                    b.HasKey("MessageReplyKey");

                    b.HasIndex("OriginalMessageKey");

                    b.HasIndex("ReplyMessageKey")
                        .IsUnique();

                    b.ToTable("Santa_MessageReplies");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_PartnerLink", b =>
                {
                    b.Property<int>("PartnerLinkKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartnerLinkKey"));

                    b.Property<bool?>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<int>("ConfirmingSantaUserKey")
                        .HasColumnType("int");

                    b.Property<bool>("ConfirmingUserIgnore")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateArchived")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ExchangeGifts")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RelationshipEnded")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SuggestedByIgnoreOld")
                        .HasColumnType("bit");

                    b.Property<int>("SuggestedBySantaUserKey")
                        .HasColumnType("int");

                    b.HasKey("PartnerLinkKey");

                    b.HasIndex("ConfirmingSantaUserKey");

                    b.HasIndex("SuggestedBySantaUserKey");

                    b.ToTable("Santa_PartnerLinks");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_Suggestion", b =>
                {
                    b.Property<int>("SuggestionKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SuggestionKey"));

                    b.Property<DateTime?>("DateArchived")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("OtherNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("SantaUserKey")
                        .HasColumnType("int");

                    b.Property<string>("SuggestionText")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("SuggestionKey");

                    b.HasIndex("SantaUserKey");

                    b.ToTable("Santa_Suggestions");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_SuggestionLink", b =>
                {
                    b.Property<int>("SuggestionLinkKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SuggestionLinkKey"));

                    b.Property<DateTime?>("DateArchived")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<int>("SuggestionKey")
                        .HasColumnType("int");

                    b.Property<int>("YearGroupUserKey")
                        .HasColumnType("int");

                    b.HasKey("SuggestionLinkKey");

                    b.HasIndex("SuggestionKey");

                    b.HasIndex("YearGroupUserKey");

                    b.ToTable("Santa_SuggestionLink");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_SuggestionLink_Audit", b =>
                {
                    b.Property<int>("AuditKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditKey"));

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("GlobalUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ParentKey")
                        .HasColumnType("int");

                    b.HasKey("AuditKey");

                    b.HasIndex("GlobalUserId");

                    b.HasIndex("ParentKey");

                    b.ToTable("Santa_SuggestionLink_Audit");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_SuggestionLink_AuditChange", b =>
                {
                    b.Property<int>("AuditChangeKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditChangeKey"));

                    b.Property<int>("AuditKey")
                        .HasColumnType("int");

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditChangeKey");

                    b.HasIndex("AuditKey");

                    b.ToTable("Santa_SuggestionLink_AuditChange");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_Suggestion_Audit", b =>
                {
                    b.Property<int>("AuditKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditKey"));

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("GlobalUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ParentKey")
                        .HasColumnType("int");

                    b.HasKey("AuditKey");

                    b.HasIndex("GlobalUserId");

                    b.HasIndex("ParentKey");

                    b.ToTable("Santa_Suggestion_Audit");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_Suggestion_AuditChange", b =>
                {
                    b.Property<int>("AuditChangeKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditChangeKey"));

                    b.Property<int>("AuditKey")
                        .HasColumnType("int");

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditChangeKey");

                    b.HasIndex("AuditKey");

                    b.ToTable("Santa_Suggestion_AuditChange");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_User", b =>
                {
                    b.Property<int>("SantaUserKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SantaUserKey"));

                    b.Property<DateTime?>("DateArchived")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("GlobalUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SantaUserKey");

                    b.HasIndex("GlobalUserId")
                        .IsUnique()
                        .HasFilter("[GlobalUserId] IS NOT NULL");

                    b.ToTable("Santa_Users");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_YearGroupUser", b =>
                {
                    b.Property<int>("YearGroupUserKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("YearGroupUserKey"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("GiftingGroupYearKey")
                        .HasColumnType("int");

                    b.Property<bool?>("Included")
                        .HasColumnType("bit");

                    b.Property<int?>("RecipientSantaUserKey")
                        .HasColumnType("int");

                    b.Property<int>("SantaUserKey")
                        .HasColumnType("int");

                    b.HasKey("YearGroupUserKey");

                    b.HasIndex("GiftingGroupYearKey");

                    b.HasIndex("RecipientSantaUserKey");

                    b.HasIndex("SantaUserKey");

                    b.ToTable("Santa_YearGroupUsers");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_YearGroupUser_Audit", b =>
                {
                    b.Property<int>("AuditKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditKey"));

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("GlobalUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ParentKey")
                        .HasColumnType("int");

                    b.HasKey("AuditKey");

                    b.HasIndex("GlobalUserId");

                    b.HasIndex("ParentKey");

                    b.ToTable("Santa_YearGroupUser_Audit");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_YearGroupUser_AuditChange", b =>
                {
                    b.Property<int>("AuditChangeKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditChangeKey"));

                    b.Property<int>("AuditKey")
                        .HasColumnType("int");

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditChangeKey");

                    b.HasIndex("AuditKey");

                    b.ToTable("Santa_YearGroupUser_AuditChange");
                });

            modelBuilder.Entity("Data.Entities.Shared.Global_User_Audit", b =>
                {
                    b.Property<int>("AuditKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditKey"));

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("GlobalUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ParentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AuditKey");

                    b.HasIndex("GlobalUserId");

                    b.HasIndex("ParentId");

                    b.ToTable("Global_User_Audit");
                });

            modelBuilder.Entity("Data.Entities.Shared.Global_User_AuditChange", b =>
                {
                    b.Property<int>("AuditChangeKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditChangeKey"));

                    b.Property<int>("AuditKey")
                        .HasColumnType("int");

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditChangeKey");

                    b.HasIndex("AuditKey");

                    b.ToTable("Global_User_AuditChanges");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Shared.Global_User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Forename")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Greeting")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleNames")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("PreferredFirstName")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("PreferredNameType")
                        .HasColumnType("int");

                    b.Property<string>("SecurityAnswer1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityAnswer2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityHint1")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SecurityHint2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SecurityQuestion1")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("SecurityQuestion2")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.ToTable("Global_User");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_GiftingGroupApplication", b =>
                {
                    b.HasOne("Data.Entities.Santa.Santa_GiftingGroup", "GiftingGroup")
                        .WithMany("MemberApplications")
                        .HasForeignKey("GiftingGroupKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Santa.Santa_User", "ResponseBySantaUser")
                        .WithMany("GiftingGroupApplicationResponses")
                        .HasForeignKey("ResponseBySantaUserKey")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Data.Entities.Santa.Santa_User", "SantaUser")
                        .WithMany("GiftingGroupApplications")
                        .HasForeignKey("SantaUserKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GiftingGroup");

                    b.Navigation("ResponseBySantaUser");

                    b.Navigation("SantaUser");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_GiftingGroupUser", b =>
                {
                    b.HasOne("Data.Entities.Santa.Santa_GiftingGroup", "GiftingGroup")
                        .WithMany("UserLinks")
                        .HasForeignKey("GiftingGroupKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Santa.Santa_User", "SantaUser")
                        .WithMany("GiftingGroupLinks")
                        .HasForeignKey("SantaUserKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GiftingGroup");

                    b.Navigation("SantaUser");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_GiftingGroupYear", b =>
                {
                    b.HasOne("Data.Entities.Santa.Santa_GiftingGroup", "GiftingGroup")
                        .WithMany("Years")
                        .HasForeignKey("GiftingGroupKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GiftingGroup");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_GiftingGroupYear_Audit", b =>
                {
                    b.HasOne("Data.Entities.Shared.Global_User", "GlobalUser")
                        .WithMany()
                        .HasForeignKey("GlobalUserId");

                    b.HasOne("Data.Entities.Santa.Santa_GiftingGroupYear", "Parent")
                        .WithMany("AuditTrail")
                        .HasForeignKey("ParentKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GlobalUser");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_GiftingGroupYear_AuditChange", b =>
                {
                    b.HasOne("Data.Entities.Santa.Santa_GiftingGroupYear_Audit", "Audit")
                        .WithMany("Changes")
                        .HasForeignKey("AuditKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audit");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_GiftingGroup_Audit", b =>
                {
                    b.HasOne("Data.Entities.Shared.Global_User", "GlobalUser")
                        .WithMany()
                        .HasForeignKey("GlobalUserId");

                    b.HasOne("Data.Entities.Santa.Santa_GiftingGroup", "Parent")
                        .WithMany("AuditTrail")
                        .HasForeignKey("ParentKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GlobalUser");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_GiftingGroup_AuditChange", b =>
                {
                    b.HasOne("Data.Entities.Santa.Santa_GiftingGroup_Audit", "Audit")
                        .WithMany("Changes")
                        .HasForeignKey("AuditKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audit");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_Message", b =>
                {
                    b.HasOne("Data.Entities.Santa.Santa_GiftingGroupYear", "GiftingGroupYear")
                        .WithMany("Messages")
                        .HasForeignKey("GiftingGroupYearKey")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Data.Entities.Santa.Santa_User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GiftingGroupYear");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_MessageRecipient", b =>
                {
                    b.HasOne("Data.Entities.Santa.Santa_Message", "Message")
                        .WithMany("Recipients")
                        .HasForeignKey("MessageKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Santa.Santa_User", "RecipientSantaUser")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("RecipientSantaUserKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("RecipientSantaUser");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_MessageReply", b =>
                {
                    b.HasOne("Data.Entities.Santa.Santa_Message", "OriginalMessage")
                        .WithMany("Replies")
                        .HasForeignKey("OriginalMessageKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Santa.Santa_Message", "ReplyMessage")
                        .WithOne("ReplyTo")
                        .HasForeignKey("Data.Entities.Santa.Santa_MessageReply", "ReplyMessageKey");

                    b.Navigation("OriginalMessage");

                    b.Navigation("ReplyMessage");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_PartnerLink", b =>
                {
                    b.HasOne("Data.Entities.Santa.Santa_User", "ConfirmingSantaUser")
                        .WithMany("ConfirmingRelationships")
                        .HasForeignKey("ConfirmingSantaUserKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Santa.Santa_User", "SuggestedBySantaUser")
                        .WithMany("SuggestedRelationships")
                        .HasForeignKey("SuggestedBySantaUserKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConfirmingSantaUser");

                    b.Navigation("SuggestedBySantaUser");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_Suggestion", b =>
                {
                    b.HasOne("Data.Entities.Santa.Santa_User", "SantaUser")
                        .WithMany("Suggestions")
                        .HasForeignKey("SantaUserKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SantaUser");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_SuggestionLink", b =>
                {
                    b.HasOne("Data.Entities.Santa.Santa_Suggestion", "Suggestion")
                        .WithMany("YearGroupUserLinks")
                        .HasForeignKey("SuggestionKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Santa.Santa_YearGroupUser", "YearGroupUser")
                        .WithMany("Suggestions")
                        .HasForeignKey("YearGroupUserKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Suggestion");

                    b.Navigation("YearGroupUser");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_SuggestionLink_Audit", b =>
                {
                    b.HasOne("Data.Entities.Shared.Global_User", "GlobalUser")
                        .WithMany()
                        .HasForeignKey("GlobalUserId");

                    b.HasOne("Data.Entities.Santa.Santa_SuggestionLink", "Parent")
                        .WithMany("AuditTrail")
                        .HasForeignKey("ParentKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GlobalUser");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_SuggestionLink_AuditChange", b =>
                {
                    b.HasOne("Data.Entities.Santa.Santa_SuggestionLink_Audit", "Audit")
                        .WithMany("Changes")
                        .HasForeignKey("AuditKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audit");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_Suggestion_Audit", b =>
                {
                    b.HasOne("Data.Entities.Shared.Global_User", "GlobalUser")
                        .WithMany()
                        .HasForeignKey("GlobalUserId");

                    b.HasOne("Data.Entities.Santa.Santa_Suggestion", "Parent")
                        .WithMany("AuditTrail")
                        .HasForeignKey("ParentKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GlobalUser");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_Suggestion_AuditChange", b =>
                {
                    b.HasOne("Data.Entities.Santa.Santa_Suggestion_Audit", "Audit")
                        .WithMany("Changes")
                        .HasForeignKey("AuditKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audit");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_User", b =>
                {
                    b.HasOne("Data.Entities.Shared.Global_User", "GlobalUser")
                        .WithOne("SantaUser")
                        .HasForeignKey("Data.Entities.Santa.Santa_User", "GlobalUserId");

                    b.Navigation("GlobalUser");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_YearGroupUser", b =>
                {
                    b.HasOne("Data.Entities.Santa.Santa_GiftingGroupYear", "GiftingGroupYear")
                        .WithMany("Users")
                        .HasForeignKey("GiftingGroupYearKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.Santa.Santa_User", "RecipientSantaUser")
                        .WithMany("RecipientYears")
                        .HasForeignKey("RecipientSantaUserKey")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Data.Entities.Santa.Santa_User", "SantaUser")
                        .WithMany("GiftingGroupYears")
                        .HasForeignKey("SantaUserKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GiftingGroupYear");

                    b.Navigation("RecipientSantaUser");

                    b.Navigation("SantaUser");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_YearGroupUser_Audit", b =>
                {
                    b.HasOne("Data.Entities.Shared.Global_User", "GlobalUser")
                        .WithMany()
                        .HasForeignKey("GlobalUserId");

                    b.HasOne("Data.Entities.Santa.Santa_YearGroupUser", "Parent")
                        .WithMany("AuditTrail")
                        .HasForeignKey("ParentKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GlobalUser");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_YearGroupUser_AuditChange", b =>
                {
                    b.HasOne("Data.Entities.Santa.Santa_YearGroupUser_Audit", "Audit")
                        .WithMany("Changes")
                        .HasForeignKey("AuditKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audit");
                });

            modelBuilder.Entity("Data.Entities.Shared.Global_User_Audit", b =>
                {
                    b.HasOne("Data.Entities.Shared.Global_User", "GlobalUser")
                        .WithMany()
                        .HasForeignKey("GlobalUserId");

                    b.HasOne("Data.Entities.Shared.Global_User", "Parent")
                        .WithMany("AuditTrail")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GlobalUser");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Data.Entities.Shared.Global_User_AuditChange", b =>
                {
                    b.HasOne("Data.Entities.Shared.Global_User_Audit", "Audit")
                        .WithMany("Changes")
                        .HasForeignKey("AuditKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audit");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.Shared.Global_User", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithOne()
                        .HasForeignKey("Data.Entities.Shared.Global_User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_GiftingGroup", b =>
                {
                    b.Navigation("AuditTrail");

                    b.Navigation("MemberApplications");

                    b.Navigation("UserLinks");

                    b.Navigation("Years");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_GiftingGroupYear", b =>
                {
                    b.Navigation("AuditTrail");

                    b.Navigation("Messages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_GiftingGroupYear_Audit", b =>
                {
                    b.Navigation("Changes");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_GiftingGroup_Audit", b =>
                {
                    b.Navigation("Changes");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_Message", b =>
                {
                    b.Navigation("Recipients");

                    b.Navigation("Replies");

                    b.Navigation("ReplyTo");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_Suggestion", b =>
                {
                    b.Navigation("AuditTrail");

                    b.Navigation("YearGroupUserLinks");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_SuggestionLink", b =>
                {
                    b.Navigation("AuditTrail");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_SuggestionLink_Audit", b =>
                {
                    b.Navigation("Changes");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_Suggestion_Audit", b =>
                {
                    b.Navigation("Changes");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_User", b =>
                {
                    b.Navigation("ConfirmingRelationships");

                    b.Navigation("GiftingGroupApplicationResponses");

                    b.Navigation("GiftingGroupApplications");

                    b.Navigation("GiftingGroupLinks");

                    b.Navigation("GiftingGroupYears");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("RecipientYears");

                    b.Navigation("SentMessages");

                    b.Navigation("SuggestedRelationships");

                    b.Navigation("Suggestions");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_YearGroupUser", b =>
                {
                    b.Navigation("AuditTrail");

                    b.Navigation("Suggestions");
                });

            modelBuilder.Entity("Data.Entities.Santa.Santa_YearGroupUser_Audit", b =>
                {
                    b.Navigation("Changes");
                });

            modelBuilder.Entity("Data.Entities.Shared.Global_User_Audit", b =>
                {
                    b.Navigation("Changes");
                });

            modelBuilder.Entity("Data.Entities.Shared.Global_User", b =>
                {
                    b.Navigation("AuditTrail");

                    b.Navigation("SantaUser");
                });
#pragma warning restore 612, 618
        }
    }
}
